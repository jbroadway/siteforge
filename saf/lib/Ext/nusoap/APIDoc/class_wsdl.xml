<?xml version="1.0"?><phpdoc><class name="wsdl" extends="XMLSchema" undoc="false" access="public"><file>d:\soapx4/lib/class.wsdl.php</file><doc><author email="dietricha@ganx4.com">Dietrich Ayala</author><inherited src="Array"/><description/><shortdescription>parses a WSDL file, allows access to it&amp;apos;s data, other utility methods</shortdescription><version>v 0.6</version></doc><function name="wsdl" undoc="false" access="public"><doc><parameter name="$wsdl" default="&amp;quot;&amp;quot;" type="string">WSDL document URL</parameter><return type="void"/><description/><shortdescription>constructor</shortdescription></doc></function><function name="parseWSDL" undoc="false" access="private"><doc><parameter name="$wsdl" default="&amp;quot;&amp;quot;" type="string">path or URL</parameter><return type="void"/><description/><shortdescription>parses the wsdl document</shortdescription></doc></function><function name="start_element" undoc="false" access="private"><doc><parameter name="$parser" type="string">XML parser object</parameter><parameter name="$name" type="string">element name</parameter><parameter name="$attrs" type="string">associative array of attributes</parameter><return type="void"/><description/><shortdescription>start-element handler</shortdescription></doc></function><function name="end_element" undoc="false" access="private"><doc><parameter name="$parser" type="string">XML parser object</parameter><parameter name="$name" type="string">element name</parameter><return type="void"/><description/><shortdescription>end-element handler</shortdescription></doc></function><function name="character_data" undoc="false" access="private"><doc><parameter name="$parser" type="string">XML parser object</parameter><parameter name="$data" type="string">element content</parameter><return type="void"/><description/><shortdescription>element content handler</shortdescription></doc></function><function name="getOperations" undoc="false" access="public"><doc><parameter name="$bindingType" default="&amp;quot;soap&amp;quot;" type="string">eg: soap, smtp, dime (only soap is currently supported)</parameter><return name="" type="array"/><description>  NOTE: currently only supports multiple services of differing binding types   This method needs some work</description><shortdescription>returns an assoc array of operation names =&amp;gt; operation data</shortdescription></doc></function><function name="getOperationData" undoc="false" access="public"><doc><parameter name="$operation" type="string">, name of operation</parameter><parameter name="$bindingType" default="&amp;quot;soap&amp;quot;" type="string">, type of binding eg: soap</parameter><return name="" type="array"/><description/><shortdescription>returns an associative array of data necessary for calling an operation</shortdescription></doc></function><function name="serialize" undoc="false" access="public"><doc><return name="" type="string"> , serialization of WSDL</return><description/><shortdescription>serialize the parsed wsdl</shortdescription></doc></function><function name="serializeRPCParameters" undoc="false" access="private"><doc><parameter name="$operation" type="string">name</parameter><parameter name="$direction" type="mixed">value</parameter><parameter name="$parameters" undoc="true"/><return name="" type="mixed">new param or false if initial value didn&amp;apos;t validate</return><description>    TODO   - only serialize namespaces used in the message   - multi-ref serialization   - validate PHP values against type definitions, return errors if invalid   - probably more stuff :)   - implement &amp;apos;out&amp;apos; functionality or write new function for &amp;apos;out&amp;apos; parameters</description><shortdescription>serialize a PHP value according to a WSDL message definition</shortdescription></doc></function><function name="serializeType" undoc="false" access="public"><doc><parameter name="$name" type="string">, name of type</parameter><parameter name="$type" type="string">, type of type, heh</parameter><parameter name="$value" type="mixed">, a native PHP value</parameter><return name="" type="string">serialization </return><description/><shortdescription>serializes a PHP value according a given type definition</shortdescription></doc></function><function name="getBindingData" undoc="true" access="private"><doc><parameter name="$binding" undoc="true"/><return type="void"/></doc></function><function name="getMessageData" undoc="true" access="private"><doc><parameter name="$operation" undoc="true"/><parameter name="$portType" undoc="true"/><parameter name="$msgType" undoc="true"/><return type="void"/></doc></function><inherited src="XMLSchema" type="functions"><element>xmlschema</element><element>parsefile</element><element>parsestring</element><element>schemastartelement</element><element>schemaendelement</element><element>schemacharacterdata</element><element>serializeschema</element><element>expandqname</element><element>xdebug</element><element>getphptype</element><element>getlocalpart</element><element>getprefix</element><element>getnamespacefromprefix</element><element>getprefixfromnamespace</element><element>gettypedef</element><element>serializetypedef</element><element>typetoform</element></inherited><inherited src="nusoap_base" type="functions"><element>nusoap_base</element><element>debug</element><element>geterror</element><element>seterror</element><element>serialize_val</element><element>serializeenvelope</element><element>timestamp_to_iso8601</element><element>iso8601_to_timestamp</element><element>formatdump</element></inherited><inherited src="nusoap_base" type="variables"><element>$soap_defencoding</element><element>$namespaces</element><element>$typemap</element><element>$xmlentities</element><element>$title</element><element>$version</element><element>$error_str</element><element>$charencoding</element></inherited><path><parent>XMLSchema</parent><parent>nusoap_base</parent></path><baseclass>nusoap_base</baseclass></class></phpdoc>