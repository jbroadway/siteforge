<?xml version="1.0"?><phpdoc><class name="XMLSchema" extends="nusoap_base" undoc="false" access="public"><file>d:\soapx4/lib/class.xmlschema.php</file><doc><author email="dietricha@ganx4.com">Dietrich Ayala</author><inherited src="Array"/><description>  no validation... yet.   very experimental and limited. As is discussed on XML-DEV, I&amp;apos;m one of the people   that just doesn&amp;apos;t have time to read the spec(s) thoroughly, and just have a couple of trusty   tutorials I refer to :)</description><shortdescription>parses an XML Schema, allows access to it&amp;apos;s data, other utility methods</shortdescription><version>v 0.6</version></doc><function name="XMLSchema" undoc="false" access="public"><doc><parameter name="$schema" default="&amp;quot;&amp;quot;" type="string">schema document URI</parameter><parameter name="$xml" default="&amp;quot;&amp;quot;" type="string">xml document URI</parameter><return type="void"/><description/><shortdescription>constructor</shortdescription></doc></function><function name="parseFile" undoc="false" access="public"><doc><parameter name="$xml" type="string">, path/URL to XML file</parameter><parameter name="$type" type="string">, (schema | xml)</parameter><return name="" type="boolean"/><description/><shortdescription>parse an XML file</shortdescription></doc></function><function name="parseString" undoc="false" access="private"><doc><parameter name="$xml" type="string">path or URL</parameter><parameter name="$type" type="string">, (schema|xml)</parameter><return type="void"/><description/><shortdescription>parse an XML string</shortdescription></doc></function><function name="schemaStartElement" undoc="false" access="private"><doc><parameter name="$parser" type="string">XML parser object</parameter><parameter name="$name" type="string">element name</parameter><parameter name="$attrs" type="string">associative array of attributes</parameter><return type="void"/><description/><shortdescription>start-element handler</shortdescription></doc></function><function name="schemaEndElement" undoc="false" access="private"><doc><parameter name="$parser" type="string">XML parser object</parameter><parameter name="$name" type="string">element name</parameter><return type="void"/><description/><shortdescription>end-element handler</shortdescription></doc></function><function name="schemaCharacterData" undoc="false" access="private"><doc><parameter name="$parser" type="string">XML parser object</parameter><parameter name="$data" type="string">element content</parameter><return type="void"/><description/><shortdescription>element content handler</shortdescription></doc></function><function name="serializeSchema" undoc="false" access="public"><doc><return type="void"/><description/><shortdescription>serialize the schema</shortdescription></doc></function><function name="expandQname" undoc="false" access="private"><doc><parameter name="$qname" type="string">qname</parameter><return name="" type="string">expanded qname</return><description/><shortdescription>expands a qualified name</shortdescription></doc></function><function name="xdebug" undoc="false" access="private"><doc><parameter name="$string" type="string">debug data</parameter><return type="void"/><description/><shortdescription>adds debug data to the clas level debug string</shortdescription></doc></function><function name="getPHPType" undoc="false" access="public"><doc><parameter name="$type" type="string">, name of defined type</parameter><parameter name="$ns" type="string">, namespace of type</parameter><return name="" type="mixed"/><description>  PHP type is kind of a misnomer since it actually returns &amp;apos;struct&amp;apos; for assoc. arrays   returns false if no type exists, or not w/ the given namespace   else returns a string that is either a native php type, or &amp;apos;struct&amp;apos;</description><shortdescription>get the PHP type of a user defined type in the schema</shortdescription></doc></function><function name="getLocalPart" undoc="false" access="public"><doc><parameter name="$str" type="string"/><return name="" type="string"/><description>  returns the original string, if not prefixed</description><shortdescription>returns the local part of a prefixed string</shortdescription></doc></function><function name="getPrefix" undoc="false" access="public"><doc><parameter name="$str" type="string"/><return name="" type="mixed"/><description>  returns false, if not prefixed</description><shortdescription>returns the prefix part of a prefixed string</shortdescription></doc></function><function name="getNamespaceFromPrefix" undoc="false" access="public"><doc><parameter name="$prefix" type="string"/><return name="" type="mixed"/><description>  or false if no prefixes registered for the given namespace</description><shortdescription>pass it a prefix, it returns a namespace</shortdescription></doc></function><function name="getPrefixFromNamespace" undoc="false" access="public"><doc><parameter name="$ns" type="string"/><return name="" type="mixed"/><description>  returns false if no namespace registered with the given prefix</description><shortdescription>returns the prefix for a given namespace</shortdescription></doc></function><function name="getTypeDef" undoc="false" access="public"><doc><parameter name="$type" type="string"/><return name="" type="mixed"/><description>  returns false if no type exists by the given name             typeDef = array(           &amp;apos;elements&amp;apos; =&amp;gt; array(), // refs to elements array          &amp;apos;restrictionBase&amp;apos; =&amp;gt; &amp;apos;&amp;apos;,          &amp;apos;phpType&amp;apos; =&amp;gt; &amp;apos;&amp;apos;,          &amp;apos;order&amp;apos; =&amp;gt; &amp;apos;(sequence|all)&amp;apos;,          &amp;apos;attrs&amp;apos; =&amp;gt; array() // refs to attributes array          )</description><shortdescription>returns an array of information about a given type</shortdescription></doc></function><function name="serializeTypeDef" undoc="false" access="public"><doc><parameter name="$type" type="string">, name of type</parameter><return name="" type="mixed"/><description/><shortdescription>returns a sample serialization of a given type, or false if no type by the given name</shortdescription></doc></function><function name="typeToForm" undoc="false" access="public"><doc><parameter name="$name" type="string">, name for type instance</parameter><parameter name="$type" type="string">, name of type</parameter><return name="" type="string"/><description>  to enter values for creating an instance of the given type.</description><shortdescription>returns HTML form elements that allow a user</shortdescription></doc></function><inherited src="nusoap_base" type="functions"><element>nusoap_base</element><element>debug</element><element>geterror</element><element>seterror</element><element>serialize_val</element><element>serializeenvelope</element><element>timestamp_to_iso8601</element><element>iso8601_to_timestamp</element><element>formatdump</element></inherited><inherited src="nusoap_base" type="variables"><element>$soap_defencoding</element><element>$namespaces</element><element>$typemap</element><element>$xmlentities</element><element>$title</element><element>$version</element><element>$error_str</element><element>$charencoding</element></inherited><path><parent>nusoap_base</parent></path><baseclass>nusoap_base</baseclass><subclasses><subclass>wsdl</subclass></subclasses></class></phpdoc>